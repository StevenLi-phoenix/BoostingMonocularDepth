name: Python Package using Conda

on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.7
      uses: actions/setup-python@v3
      with:
        python-version: 3.7
    - name: Add conda to system path
      run: |
        # $CONDA is an environment variable pointing to the root of the miniconda directory
        echo $CONDA/bin >> $GITHUB_PATH
    - name: Install dependencies
      run: |
        conda install pytorch torchvision opencv cudatoolkit=10.2 -c pytorch
        conda install matplotlib
        conda install scipy
        conda install scikit-image
    - name: Lint with flake8
      run: |
        conda install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        conda install pytest
        pytest
    - name: Download datasets
      run: |
        ./setup.sh
    - name: cuda-toolkit
      # You may pin to the exact commit or the version.
      # uses: Jimver/cuda-toolkit@290bacef8a00668d064071ae181ab55396572c6b
      uses: Jimver/cuda-toolkit@v0.2.7
      with:
        # Cuda version
        cuda: "11.7.0" # optional, default is 11.7.0
        # Installation method, can be either 'local' or 'network'. 'local' downloads the entire installer with all packages and runs that (you can still only install certain packages with sub-packages on Windows). 'network' downloads a smaller executable which only downloads necessary packages which you can define in subPackages
        method: 'network' # optional, default is local
    - name: Run prediction with pretrained params
      run: |
        python run.py --Final --data_dir inputs --output_dir  outputs/midas/ --depthNet 0
        python run.py --Final --data_dir inputs --output_dir  outputs/leres/ --depthNet 2
    - name: Zip output
      run: zip -r -9 output.zip output/
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: dictionary_rgb
        release_name: Release output
        draft: false
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset
      uses: sekwah41/upload-release-assets@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./output.zip
        asset_name: output.zip
        asset_content_type: application/zip
